// <auto-generated />
using System;
using FinancialAppBack.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinancialAppBack.Infrastructure.Migrations
{
    [DbContext(typeof(FinancialAppDbContext))]
    [Migration("20250304005233_AddingEntities")]
    partial class AddingEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinancialAppBack.Domain.BankAccounts.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("bankaccount", "public");
                });

            modelBuilder.Entity("FinancialAppBack.Domain.Cards.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Badge")
                        .HasColumnType("integer");

                    b.Property<int>("BillingCycleDay")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<int>("DueDay")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Limit")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("card", "public");
                });

            modelBuilder.Entity("FinancialAppBack.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("category", "public");
                });

            modelBuilder.Entity("FinancialAppBack.Domain.People.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("person", "public");
                });

            modelBuilder.Entity("FinancialAppBack.Domain.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountFromId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountToId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Applied")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountFromId")
                        .IsUnique();

                    b.HasIndex("AccountToId")
                        .IsUnique();

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("transaction", "public");
                });

            modelBuilder.Entity("FinancialAppBack.Domain.Transactions.Transaction", b =>
                {
                    b.HasOne("FinancialAppBack.Domain.BankAccounts.BankAccount", "AccountFrom")
                        .WithOne()
                        .HasForeignKey("FinancialAppBack.Domain.Transactions.Transaction", "AccountFromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinancialAppBack.Domain.BankAccounts.BankAccount", "AccountTo")
                        .WithOne()
                        .HasForeignKey("FinancialAppBack.Domain.Transactions.Transaction", "AccountToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinancialAppBack.Domain.Cards.Card", "Card")
                        .WithOne()
                        .HasForeignKey("FinancialAppBack.Domain.Transactions.Transaction", "CardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinancialAppBack.Domain.Categories.Category", "Category")
                        .WithOne()
                        .HasForeignKey("FinancialAppBack.Domain.Transactions.Transaction", "CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinancialAppBack.Domain.People.Person", "Person")
                        .WithOne()
                        .HasForeignKey("FinancialAppBack.Domain.Transactions.Transaction", "PersonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AccountFrom");

                    b.Navigation("AccountTo");

                    b.Navigation("Card");

                    b.Navigation("Category");

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
